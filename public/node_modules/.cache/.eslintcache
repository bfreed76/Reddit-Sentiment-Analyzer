[{"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/index.js":"1","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/App.js":"2","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/reportWebVitals.js":"3","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/context/Context.js":"4","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Signup.js":"5","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Login.js":"6","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/HeaderComp.js":"7","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Profile.js":"8","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/MySearches.js":"9","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/UpdateSuccessful.js":"10","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/TopContent.js":"11","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsContainer.js":"12","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Search.js":"13","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/SampleContent.js":"14","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/LoginOrSignup.js":"15","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsHeader.js":"16","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/TopContentCard.js":"17","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsCard.js":"18","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/EmoTargResults.js":"19","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/EmoDocResults.js":"20"},{"size":791,"mtime":1632417693925,"results":"21","hashOfConfig":"22"},{"size":4047,"mtime":1635976593382,"results":"23","hashOfConfig":"22"},{"size":364,"mtime":1632255636071,"results":"24","hashOfConfig":"22"},{"size":1014,"mtime":1634245665290,"results":"25","hashOfConfig":"22"},{"size":3091,"mtime":1635976662772,"results":"26","hashOfConfig":"22"},{"size":1818,"mtime":1635976723442,"results":"27","hashOfConfig":"22"},{"size":1564,"mtime":1634246431380,"results":"28","hashOfConfig":"22"},{"size":741,"mtime":1632423205285,"results":"29","hashOfConfig":"22"},{"size":810,"mtime":1635975062312,"results":"30","hashOfConfig":"22"},{"size":457,"mtime":1632423205285,"results":"31","hashOfConfig":"22"},{"size":708,"mtime":1632428603435,"results":"32","hashOfConfig":"22"},{"size":705,"mtime":1632423205285,"results":"33","hashOfConfig":"22"},{"size":3051,"mtime":1635976691512,"results":"34","hashOfConfig":"22"},{"size":534,"mtime":1632423205285,"results":"35","hashOfConfig":"22"},{"size":311,"mtime":1632423205285,"results":"36","hashOfConfig":"22"},{"size":1841,"mtime":1635976140262,"results":"37","hashOfConfig":"22"},{"size":2527,"mtime":1635978446232,"results":"38","hashOfConfig":"22"},{"size":632,"mtime":1635976273322,"results":"39","hashOfConfig":"22"},{"size":1093,"mtime":1632423205285,"results":"40","hashOfConfig":"22"},{"size":1031,"mtime":1632423205285,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13oif1h",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/index.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/App.js",["84"],"import \"./App.css\";\nimport { Tab } from \"semantic-ui-react\";\nimport Login from \"./Components/Login\";\nimport Signup from \"./Components/Signup\";\nimport Profile from \"./Components/Profile\";\nimport { Context } from \"./context/Context\";\nimport { useContext, useEffect } from \"react\";\nimport HeaderComp from \"./Components/HeaderComp\";\nimport MySearches from \"./Components/MySearches\";\nimport UpdateSuccessful from \"./Components/UpdateSuccessful\";\nimport Search from \"./Components/Search\";\nimport TopContent from \"./Components/TopContent\";\nimport ResultsContainer from \"./Components/ResultsContainer\";\nimport SampleContent from \"./Components/SampleContent\";\nimport { BrowserRouter, Route, Switch, useHistory, matchPath, NavLink } from \"react-router-dom\";\n\nconst App = () => {\n  const { setUser, loggedin, setLoggedin } = useContext(Context);\n  const history = useHistory();\n\n  // Checks user authentication\n\n  useEffect(() => {\n    findMe();\n  }, []);\n\n  const findMe = () => {\n    fetch(\"/api/me\")\n      .then((res) => res.json())\n      .then((data) => {\n        if (!data.error) {\n          setUser(data);\n          setLoggedin(true);\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => console.log(\"error =\", err));\n  };\n\n  // Logout\n\n  const handleLogout = () => {\n    fetch(\"/api/logout\", {\n      method: \"DELETE\",\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoggedin(false);\n        setUser({});\n        window.location.reload();\n      })\n      .catch((err) => console.log(\"error =\",err));\n  };\n\n  // Routes to signup component\n\n  const handleUpdate = () => {\n    history.push(\"/signup\");\n  };\n\n  // Three Semantic UI tabs for primary interface/app body\n\n  const panes = [\n    {\n      menuItem: {\n        as: NavLink,\n        content: \"Most Recent\",\n        to: \"/top_content\",\n        exact: true,\n        key: \"top_content\",\n      },\n      render: () => (\n        <Route path='/top_content' exact>\n          <Tab.Pane>\n            <div>\n              {loggedin ? (\n                <TopContent />\n              ) : (\n                <div>\n                  <SampleContent />\n                </div>\n              )}\n            </div>\n          </Tab.Pane>\n        </Route>\n      ),\n    },\n    {\n      menuItem: {\n        as: NavLink,\n        content: \"Search\",\n        to: \"/\",\n        exact: true,\n        key: \"home\",\n      },\n      render: () => (\n        <Route path='/' exact>\n          <Tab.Pane>\n            <div>\n              {\" \"}\n              <Search />\n            </div>\n          </Tab.Pane>\n        </Route>\n      ),\n    },\n    {\n      menuItem: loggedin\n        ? {\n            as: NavLink,\n            content: \"My Searches\",\n            to: \"/my_searches\",\n            exact: true,\n            key: \"my_searches\",\n          }\n        : {},\n      render: () => (\n        <Route path='/my_searches' exact>\n          <Tab.Pane>\n            <div>\n              <MySearches />\n            </div>\n          </Tab.Pane>\n        </Route>\n      ),\n    },\n  ];\n\n  const defaultActiveIndex = panes.findIndex((pane) => {\n    return !!matchPath(window.location.pathname, {\n      path: pane.menuItem.to,\n      exact: true,\n    });\n  });\n\n  // React routing; render header and tabs (body)\n\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <br></br>\n        <HeaderComp handleLogout={handleLogout} handleUpdate={handleUpdate} findMe={findMe} />\n        <hr></hr>\n        <Tab panes={panes} defaultActiveIndex={defaultActiveIndex} />\n        <br></br>\n        <div></div>\n        <Switch>\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/signup' component={Signup} />\n          <Route exact path='/results' component={ResultsContainer} />\n          <Route exact path='/success'>\n            <UpdateSuccessful findMe={findMe} />\n          </Route>\n          <Route exact path='/profile'>\n            <Profile handleLogout={handleLogout} />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/reportWebVitals.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/context/Context.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Signup.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Login.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/HeaderComp.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Profile.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/MySearches.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/UpdateSuccessful.js",["85"],"import React, { useEffect, useContext } from \"react\";\nimport { Context } from \"../context/Context\";\n\nconst UpdateSuccessful = ({ findMe }) => {\n  const { user } = useContext(Context);\n\n  // Authenticates user with updated profile data\n\n  useEffect(() => {\n    findMe();\n  }, []);\n\n  // Success message\n\n  return (\n    <div>\n      <h2>Welcome {user.username}.</h2>\n      <h3>Click a tab to continue.</h3>\n    </div>\n  );\n};\n\nexport default UpdateSuccessful;\n","/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/TopContent.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsContainer.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Search.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/SampleContent.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/LoginOrSignup.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsHeader.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/TopContentCard.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsCard.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/EmoTargResults.js",[],"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/EmoDocResults.js",[],{"ruleId":"86","severity":1,"message":"87","line":25,"column":6,"nodeType":"88","endLine":25,"endColumn":8,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":11,"column":6,"nodeType":"88","endLine":11,"endColumn":8,"suggestions":"91"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'findMe'. Either include it or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has a missing dependency: 'findMe'. Either include it or remove the dependency array. If 'findMe' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["93"],{"desc":"94","fix":"95"},{"desc":"94","fix":"96"},"Update the dependencies array to be: [findMe]",{"range":"97","text":"98"},{"range":"99","text":"98"},[940,942],"[findMe]",[275,277]]