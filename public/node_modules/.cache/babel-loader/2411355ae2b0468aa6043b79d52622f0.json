{"ast":null,"code":"var _jsxFileName = \"/home/brinton/Development/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Button, Form, Input } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../context/Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Search = () => {\n  _s();\n\n  const history = useHistory();\n  const [error, setError] = useState(false);\n  const [localUsername, setLocalUsername] = useState(\"\");\n  const [localSubreddit, setlocalSubreddit] = useState(\"\");\n  const [localSearchTerms, setLocalSearchTerms] = useState(\"\");\n  const {\n    user,\n    setResults,\n    sUsername,\n    setSUsername,\n    subreddit,\n    setSubreddit,\n    searchTerms,\n    setSearchTerms,\n    searchTarget\n  } = useContext(Context);\n  useEffect(() => {\n    resetGlobalState();\n  }, [localUsername, localSubreddit, localSearchTerms]);\n\n  const resetGlobalState = () => {// setSUsername(localUsername);\n    // setSubreddit(localSubreddit);\n    // setSearchTerms(localSearchTerms);\n  };\n\n  let pushShiftURL = \"https://api.pushshift.io/reddit/search/\" + searchTarget + \"/?q=\" + searchTerms + \"&subreddit=\" + subreddit + \"&author=\" + setSUsername + \"&fields=author,created_utc,body,score,subreddit,url,title,selftext,permalink\" + \"&size=\" + \"3\";\n\n  const handleSearch = e => {\n    e.preventDefault();\n    console.log(pushShiftURL);\n    const postObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: user,\n        url: pushShiftURL,\n        sUsername,\n        localSubreddit,\n        localSearchTerms\n      })\n    };\n    fetch(\"/reddit\", postObj).then(res => {\n      if (res.ok) {\n        res.json().then(res => {\n          setResults(res);\n          setError(false);\n          history.push(\"/results\");\n        });\n      } else {\n        res.json().then(errorData => {\n          console.log(\"SERVER ERR: \", errorData.errors);\n          setError(true);\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Discover emotional content on Reddit.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          icon: \"search\",\n          iconPosition: \"left\",\n          placeholder: \"u/ username\",\n          onChange: e => setSUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          icon: \"search\",\n          iconPosition: \"left\",\n          placeholder: \"r/ subreddit\",\n          onChange: e => setSubreddit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          icon: \"search\",\n          iconPosition: \"left\",\n          placeholder: \"search terms\",\n          onChange: e => setLocalSearchTerms(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), error ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"No Results Found. Please Search Again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 20\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        primary: true,\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Search, \"wpe19god1zPbdnharAyKtaL65sA=\", false, function () {\n  return [useHistory];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/brinton/Development/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Search.js"],"names":["React","useState","useContext","useEffect","Button","Form","Input","useHistory","Context","Search","history","error","setError","localUsername","setLocalUsername","localSubreddit","setlocalSubreddit","localSearchTerms","setLocalSearchTerms","user","setResults","sUsername","setSUsername","subreddit","setSubreddit","searchTerms","setSearchTerms","searchTarget","resetGlobalState","pushShiftURL","handleSearch","e","preventDefault","console","log","postObj","method","headers","body","JSON","stringify","url","fetch","then","res","ok","json","push","errorData","errors","target","value","color"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { Button, Form, Input } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../context/Context\";\n\nconst Search = () => {\n  const history = useHistory();\n  const [error, setError] = useState(false);\n  const [localUsername, setLocalUsername] = useState(\"\");\n  const [localSubreddit, setlocalSubreddit] = useState(\"\");\n  const [localSearchTerms, setLocalSearchTerms] = useState(\"\");\n  const {\n    user,\n    setResults,\n    sUsername,\n    setSUsername,\n    subreddit,\n    setSubreddit,\n    searchTerms,\n    setSearchTerms,\n    searchTarget,\n  } = useContext(Context);\n\n  useEffect(() => {\n    resetGlobalState();\n  }, [localUsername, localSubreddit, localSearchTerms]);\n\n  const resetGlobalState = () => {\n    // setSUsername(localUsername);\n    // setSubreddit(localSubreddit);\n    // setSearchTerms(localSearchTerms);\n  };\n\n  let pushShiftURL =\n    \"https://api.pushshift.io/reddit/search/\" +\n    searchTarget +\n    \"/?q=\" +\n    searchTerms +\n    \"&subreddit=\" +\n    subreddit +\n    \"&author=\" +\n    setSUsername +\n    \"&fields=author,created_utc,body,score,subreddit,url,title,selftext,permalink\" +\n    \"&size=\" +\n    \"3\";\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    console.log(pushShiftURL);\n    const postObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: user,\n        url: pushShiftURL,\n        sUsername,\n        localSubreddit,\n        localSearchTerms,\n      }),\n    };\n    fetch(\"/reddit\", postObj).then((res) => {\n      if (res.ok) {\n        res.json().then((res) => {\n          setResults(res);\n          setError(false);\n          history.push(\"/results\");\n        });\n      } else {\n        res.json().then((errorData) => {\n          console.log(\"SERVER ERR: \", errorData.errors);\n          setError(true);\n        });\n      }\n    });\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSearch}>\n        <h2>Discover emotional content on Reddit.</h2>\n        <Form.Field>\n          <Input\n            icon='search'\n            iconPosition='left'\n            placeholder='u/ username'\n            onChange={(e) => setSUsername(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            icon='search'\n            iconPosition='left'\n            placeholder='r/ subreddit'\n            onChange={(e) => setSubreddit(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            icon='search'\n            iconPosition='left'\n            placeholder='search terms'\n            onChange={(e) => setLocalSearchTerms(e.target.value)}\n          />\n          {error ? <h4 style={{ color: \"red\" }}>No Results Found. Please Search Again.</h4> : null}\n        </Form.Field>\n        <br></br>\n        <Button primary type='submit'>\n          Search\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}