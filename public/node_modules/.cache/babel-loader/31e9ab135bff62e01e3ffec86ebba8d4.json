{"ast":null,"code":"var _jsxFileName = \"/home/brinton/Development/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { Button, Form, Input, Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../context/Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = () => {\n  _s();\n\n  const history = useHistory();\n  const [error, setError] = useState(false);\n  const [loading, setloading] = useState(false);\n  const {\n    user,\n    setResults,\n    sUsername,\n    setSUsername,\n    subreddit,\n    setSubreddit,\n    searchTerms,\n    setSearchTerms,\n    searchTarget\n  } = useContext(Context); // Builds URI \n\n  let pushShiftURL = \"https://api.pushshift.io/reddit/search/\" + searchTarget + \"/?q=\" + searchTerms + \"&subreddit=\" + subreddit + \"&author=\" + sUsername + \"&fields=author,created_utc,body,score,subreddit,url,title,selftext,permalink\" + \"&size=\" + \"50\";\n\n  const handleSearch = e => {\n    e.preventDefault();\n    setloading(true);\n    console.log(pushShiftURL);\n    const postObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: user,\n        url: pushShiftURL,\n        sUsername,\n        subreddit,\n        searchTerms\n      })\n    };\n    fetch(\"/reddit\", postObj).then(res => {\n      if (res.ok) {\n        res.json().then(res => {\n          setResults(res);\n          setError(false);\n          history.push(\"/results\");\n        });\n      } else {\n        res.json().then(errorData => {\n          console.log(\"SERVER ERR: \", errorData.errors);\n          setError(true);\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    children: [loading ? /*#__PURE__*/_jsxDEV(Dimmer, {\n      active: true,\n      inverted: true,\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        children: \"Analyzing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Discover emotional content on Reddit.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          icon: \"search\",\n          iconPosition: \"left\",\n          placeholder: \"u/ username\",\n          value: sUsername,\n          onChange: e => setSUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          icon: \"search\",\n          iconPosition: \"left\",\n          placeholder: \"r/ subreddit\",\n          value: subreddit,\n          onChange: e => setSubreddit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          icon: \"search\",\n          iconPosition: \"left\",\n          placeholder: \"search terms\",\n          value: searchTerms,\n          onChange: e => setSearchTerms(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), error ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"No Results Found. Please Search Again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 20\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        primary: true,\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"XrQEYANmH61/D57PlzYWcOi6j8o=\", false, function () {\n  return [useHistory];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/brinton/Development/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Search.js"],"names":["React","useState","useContext","Button","Form","Input","Dimmer","Loader","Segment","useHistory","Context","Search","history","error","setError","loading","setloading","user","setResults","sUsername","setSUsername","subreddit","setSubreddit","searchTerms","setSearchTerms","searchTarget","pushShiftURL","handleSearch","e","preventDefault","console","log","postObj","method","headers","body","JSON","stringify","url","fetch","then","res","ok","json","push","errorData","errors","target","value","color"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { Button, Form, Input, Dimmer, Loader, Segment } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../context/Context\";\n\nconst Search = () => {\n  const history = useHistory();\n  const [error, setError] = useState(false);\n  const [loading, setloading] = useState(false);\n  const {\n    user,\n    setResults,\n    sUsername,\n    setSUsername,\n    subreddit,\n    setSubreddit,\n    searchTerms,\n    setSearchTerms,\n    searchTarget,\n  } = useContext(Context);\n\n  // Builds URI \n\n  let pushShiftURL =\n    \"https://api.pushshift.io/reddit/search/\" +\n    searchTarget +\n    \"/?q=\" +\n    searchTerms +\n    \"&subreddit=\" +\n    subreddit +\n    \"&author=\" +\n    sUsername +\n    \"&fields=author,created_utc,body,score,subreddit,url,title,selftext,permalink\" +\n    \"&size=\" +\n    \"50\";\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    setloading(true);\n    console.log(pushShiftURL);\n    const postObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: user,\n        url: pushShiftURL,\n        sUsername,\n        subreddit,\n        searchTerms,\n      }),\n    };\n    fetch(\"/reddit\", postObj).then((res) => {\n      if (res.ok) {\n        res.json().then((res) => {\n          setResults(res);\n          setError(false);\n          history.push(\"/results\");\n        });\n      } else {\n        res.json().then((errorData) => {\n          console.log(\"SERVER ERR: \", errorData.errors);\n          setError(true);\n        });\n      }\n    });\n  };\n\n  return (\n    <Segment>\n      {loading ? (\n        <Dimmer active inverted>\n          <Loader>Analyzing...</Loader>\n        </Dimmer>\n      ) : null}\n      <Form onSubmit={handleSearch}>\n        <h2>Discover emotional content on Reddit.</h2>\n        <Form.Field>\n          <Input\n            icon='search'\n            iconPosition='left'\n            placeholder='u/ username'\n            value={sUsername}\n            onChange={(e) => setSUsername(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            icon='search'\n            iconPosition='left'\n            placeholder='r/ subreddit'\n            value={subreddit}\n            onChange={(e) => setSubreddit(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            icon='search'\n            iconPosition='left'\n            placeholder='search terms'\n            value={searchTerms}\n            onChange={(e) => setSearchTerms(e.target.value)}\n          />\n          {error ? <h4 style={{ color: \"red\" }}>No Results Found. Please Search Again.</h4> : null}\n        </Form.Field>\n        <br></br>\n        <Button primary type='submit'>\n          Search\n        </Button>\n      </Form>\n    </Segment>\n  );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}