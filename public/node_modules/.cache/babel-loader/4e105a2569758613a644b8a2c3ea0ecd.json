{"ast":null,"code":"import _slicedToArray from\"/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";export var Context=/*#__PURE__*/createContext();var ContextProvider=function ContextProvider(props){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loggedin=_useState4[0],setLoggedin=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),results=_useState6[0],setResults=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),sUsername=_useState8[0],setSUsername=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),subreddit=_useState10[0],setSubreddit=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),searchTerms=_useState12[0],setSearchTerms=_useState12[1];var _useState13=useState(\"comment\"),_useState14=_slicedToArray(_useState13,2),searchTarget=_useState14[0],setSearchTarget=_useState14[1];var _useState15=useState(false),_useState16=_slicedToArray(_useState15,2),isUpdating=_useState16[0],setIsUpdating=_useState16[1];// Context 'store'\nvar store={user:user,setUser:setUser,loggedin:loggedin,setLoggedin:setLoggedin,results:results,setResults:setResults,sUsername:sUsername,setSUsername:setSUsername,subreddit:subreddit,setSubreddit:setSubreddit,searchTerms:searchTerms,setSearchTerms:setSearchTerms,searchTarget:searchTarget,setSearchTarget:setSearchTarget,isUpdating:isUpdating,setIsUpdating:setIsUpdating};// Wrapped contenxt provider component at Index.js\nreturn/*#__PURE__*/_jsx(Context.Provider,{value:store,children:props.children});};export default ContextProvider;","map":{"version":3,"sources":["/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/context/Context.js"],"names":["React","createContext","useState","Context","ContextProvider","props","user","setUser","loggedin","setLoggedin","results","setResults","sUsername","setSUsername","subreddit","setSubreddit","searchTerms","setSearchTerms","searchTarget","setSearchTarget","isUpdating","setIsUpdating","store","children"],"mappings":"2JAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,KAA+C,OAA/C,C,2CAEA,MAAO,IAAMC,CAAAA,OAAO,cAAGF,aAAa,EAA7B,CACP,GAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CACjC,cAAwBH,QAAQ,CAAC,EAAD,CAAhC,wCAAOI,IAAP,eAAaC,OAAb,eACA,eAAgCL,QAAQ,CAAC,KAAD,CAAxC,yCAAOM,QAAP,eAAiBC,WAAjB,eACA,eAA8BP,QAAQ,EAAtC,yCAAOQ,OAAP,eAAgBC,UAAhB,eACA,eAAkCT,QAAQ,CAAC,EAAD,CAA1C,yCAAOU,SAAP,eAAkBC,YAAlB,eACA,eAAkCX,QAAQ,CAAC,EAAD,CAA1C,0CAAOY,SAAP,gBAAkBC,YAAlB,gBACA,gBAAsCb,QAAQ,CAAC,EAAD,CAA9C,2CAAOc,WAAP,gBAAoBC,cAApB,gBACA,gBAAwCf,QAAQ,CAAC,SAAD,CAAhD,2CAAOgB,YAAP,gBAAqBC,eAArB,gBACA,gBAAoCjB,QAAQ,CAAC,KAAD,CAA5C,2CAAOkB,UAAP,gBAAmBC,aAAnB,gBAEA;AAEA,GAAMC,CAAAA,KAAK,CAAG,CACZhB,IAAI,CAAJA,IADY,CAEZC,OAAO,CAAPA,OAFY,CAGZC,QAAQ,CAARA,QAHY,CAIZC,WAAW,CAAXA,WAJY,CAKZC,OAAO,CAAPA,OALY,CAMZC,UAAU,CAAVA,UANY,CAOZC,SAAS,CAATA,SAPY,CAQZC,YAAY,CAAZA,YARY,CASZC,SAAS,CAATA,SATY,CAUZC,YAAY,CAAZA,YAVY,CAWZC,WAAW,CAAXA,WAXY,CAYZC,cAAc,CAAdA,cAZY,CAaZC,YAAY,CAAZA,YAbY,CAcZC,eAAe,CAAfA,eAdY,CAeZC,UAAU,CAAVA,UAfY,CAgBZC,aAAa,CAAbA,aAhBY,CAAd,CAmBA;AACA,mBAAO,KAAC,OAAD,CAAS,QAAT,EAAkB,KAAK,CAAEC,KAAzB,UAAiCjB,KAAK,CAACkB,QAAvC,EAAP,CACD,CAjCD,CAmCA,cAAenB,CAAAA,eAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const Context = createContext();\nconst ContextProvider = (props) => {\n  const [user, setUser] = useState({});\n  const [loggedin, setLoggedin] = useState(false);\n  const [results, setResults] = useState();\n  const [sUsername, setSUsername] = useState(\"\");\n  const [subreddit, setSubreddit] = useState(\"\");\n  const [searchTerms, setSearchTerms] = useState(\"\");\n  const [searchTarget, setSearchTarget] = useState(\"comment\");\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  // Context 'store'\n\n  const store = {\n    user,\n    setUser,\n    loggedin,\n    setLoggedin,\n    results,\n    setResults,\n    sUsername,\n    setSUsername,\n    subreddit,\n    setSubreddit,\n    searchTerms,\n    setSearchTerms,\n    searchTarget,\n    setSearchTarget,\n    isUpdating,\n    setIsUpdating\n  };\n\n  // Wrapped contenxt provider component at Index.js\n  return <Context.Provider value={store}>{props.children}</Context.Provider>;\n};\n\nexport default ContextProvider;\n"]},"metadata":{},"sourceType":"module"}