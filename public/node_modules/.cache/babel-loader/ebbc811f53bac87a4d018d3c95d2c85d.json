{"ast":null,"code":"var _jsxFileName = \"/home/brinton/Development/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Signup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Context } from \"../context/Context\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Signup = () => {\n  _s();\n\n  const [username, setUsername] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const {\n    user,\n    setUser,\n    loggedin,\n    setLoggedin,\n    isUpdating,\n    setIsUpdating\n  } = useContext(Context); // Sets local state to global state on component render\n\n  useEffect(() => {\n    setUsername(user.username);\n    setEmail(user.email);\n  }, [user.username, user.email]); // Handles signup with \n\n  const handleSignup = e => {\n    e.preventDefault();\n\n    if (!username || !email || !password) {\n      return console.log(\"field(s) missing\");\n    }\n\n    fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    }).then(r => r.json()).then(user => {\n      console.log(user);\n      setUser(user);\n      setLoggedin(true);\n      history.push(\"success\");\n    }).catch(err => console.log(err));\n  };\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    fetch(\"/update\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        email\n      })\n    }).then(res => res.json()).then(res => {\n      setIsUpdating(false);\n      history.push(\"success\");\n    }).catch(err => console.log(\"Update err = \", err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!loggedin ? setIsUpdating(false) : null, /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSignup,\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), isUpdating ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Please enter new username or email.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), isUpdating ? /*#__PURE__*/_jsxDEV(Button, {\n        primary: true,\n        onClick: handleUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: \"right\"\n          },\n          children: \"* All fields required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          primary: true,\n          type: \"submit\",\n          children: \"Signup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signup, \"GOpzf/9cq0TsJg1POgeboP6Xruc=\", false, function () {\n  return [useHistory];\n});\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/home/brinton/Development/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/Signup.js"],"names":["React","useState","useContext","useEffect","Context","useHistory","Button","Form","Signup","username","setUsername","email","setEmail","password","setPassword","history","user","setUser","loggedin","setLoggedin","isUpdating","setIsUpdating","handleSignup","e","preventDefault","console","log","fetch","method","headers","body","JSON","stringify","then","r","json","push","catch","err","handleUpdate","res","target","value","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,EAAlC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMc,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA,WAA3B;AAAwCC,IAAAA,UAAxC;AAAoDC,IAAAA;AAApD,MAAsEnB,UAAU,CAACE,OAAD,CAAtF,CALmB,CAOnB;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACM,IAAI,CAACP,QAAN,CAAX;AACAG,IAAAA,QAAQ,CAACI,IAAI,CAACL,KAAN,CAAR;AACD,GAHQ,EAGN,CAACK,IAAI,CAACP,QAAN,EAAgBO,IAAI,CAACL,KAArB,CAHM,CAAT,CATmB,CAcnB;;AAEA,QAAMW,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACf,QAAD,IAAa,CAACE,KAAd,IAAuB,CAACE,QAA5B,EAAsC;AACpC,aAAOY,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAP;AACD;;AACDC,IAAAA,KAAK,CAAC,SAAD,EAAY;AACfC,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFM;AAKfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEvB,QAAAA,QAAF;AAAYE,QAAAA,KAAZ;AAAmBE,QAAAA;AAAnB,OAAf;AALS,KAAZ,CAAL,CAOGoB,IAPH,CAOSC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAPf,EAQGF,IARH,CAQSjB,IAAD,IAAU;AACdS,MAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,MAAAA,OAAO,CAACqB,IAAR,CAAa,SAAb;AACD,KAbH,EAcGC,KAdH,CAcUC,GAAD,IAASb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CAdlB;AAeD,GApBD;;AAsBA,QAAMC,YAAY,GAAIhB,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAG,IAAAA,KAAK,CAAC,SAAD,EAAY;AACfC,MAAAA,MAAM,EAAE,OADO;AAEfC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFM;AAKfC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEvB,QAAAA,QAAF;AAAYE,QAAAA;AAAZ,OAAf;AALS,KAAZ,CAAL,CAOGsB,IAPH,CAOSO,GAAD,IAASA,GAAG,CAACL,IAAJ,EAPjB,EAQGF,IARH,CAQSO,GAAD,IAAS;AACbnB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAN,MAAAA,OAAO,CAACqB,IAAR,CAAa,SAAb;AACD,KAXH,EAYGC,KAZH,CAYUC,GAAD,IAASb,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,GAA7B,CAZlB;AAaD,GAfD;;AAiBA,sBACE;AAAA,eACG,CAACpB,QAAD,GAAYG,aAAa,CAAC,KAAD,CAAzB,GAAmC,IADtC,eAEE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEC,YAAhB;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,WAAW,EAAC,UADd;AAEE,UAAA,KAAK,EAAEb,QAFT;AAGE,UAAA,QAAQ,EAAGc,CAAD,IAAOb,WAAW,CAACa,CAAC,CAACkB,MAAF,CAASC,KAAV;AAH9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,WAAW,EAAC,OAAnB;AAA2B,UAAA,KAAK,EAAE/B,KAAlC;AAAyC,UAAA,QAAQ,EAAGY,CAAD,IAAOX,QAAQ,CAACW,CAAC,CAACkB,MAAF,CAASC,KAAV;AAAlE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,EAaGtB,UAAU,gBACT;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,uBADS,gBAKT,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,WAAW,EAAC,UADd;AAEE,UAAA,KAAK,EAAEP,QAFT;AAGE,UAAA,QAAQ,EAAGU,CAAD,IAAOT,WAAW,CAACS,CAAC,CAACkB,MAAF,CAASC,KAAV;AAH9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ,eA2BE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA,cA3BF,EA4BGtB,UAAU,gBACT,QAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,OAAO,EAAEmB,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADS,gBAKT;AAAA,gCACE;AAAG,UAAA,KAAK,EAAE;AAAEI,YAAAA,SAAS,EAAE;AAAb,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,IAAI,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD,CArGD;;GAAMnC,M;UAIYH,U;;;KAJZG,M;AAuGN,eAAeA,MAAf","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { Context } from \"../context/Context\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Form } from \"semantic-ui-react\";\n\nconst Signup = () => {\n  const [username, setUsername] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const { user, setUser, loggedin, setLoggedin, isUpdating, setIsUpdating } = useContext(Context);\n\n  // Sets local state to global state on component render\n\n  useEffect(() => {\n    setUsername(user.username);\n    setEmail(user.email);\n  }, [user.username, user.email]);\n\n  // Handles signup with \n\n  const handleSignup = (e) => {\n    e.preventDefault();\n    if (!username || !email || !password) {\n      return console.log(\"field(s) missing\");\n    }\n    fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, email, password }),\n    })\n      .then((r) => r.json())\n      .then((user) => {\n        console.log(user);\n        setUser(user);\n        setLoggedin(true);\n        history.push(\"success\");\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleUpdate = (e) => {\n    e.preventDefault();\n    fetch(\"/update\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, email }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setIsUpdating(false);\n        history.push(\"success\");\n      })\n      .catch((err) => console.log(\"Update err = \", err));\n  };\n\n  return (\n    <div>\n      {!loggedin ? setIsUpdating(false) : null}\n      <Form onSubmit={handleSignup}>\n        <Form.Field>\n          <label>Username</label>\n          <input\n            placeholder='Username'\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Email</label>\n          <input placeholder='Email' value={email} onChange={(e) => setEmail(e.target.value)} />\n        </Form.Field>\n        {isUpdating ? (\n          <>\n            <h3>Please enter new username or email.</h3>\n          </>\n        ) : (\n          <Form.Field>\n            <label>Password</label>\n            <input\n              placeholder='password'\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </Form.Field>\n        )}\n        <Form.Field></Form.Field>\n        {isUpdating ? (\n          <Button primary onClick={handleUpdate}>\n            Update\n          </Button>\n        ) : (\n          <>\n            <p style={{ textAlign: \"right\" }}>* All fields required</p>\n            <Button primary type='submit'>\n              Signup\n            </Button>\n          </>\n        )}\n      </Form>\n    </div>\n  );\n};\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}