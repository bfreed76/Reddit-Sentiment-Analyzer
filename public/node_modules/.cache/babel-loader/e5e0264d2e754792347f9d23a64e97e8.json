{"ast":null,"code":"import React,{useContext}from\"react\";import{Divider,Header,Icon,Table}from\"semantic-ui-react\";import{Context}from\"../context/Context\";import EmoDocResults from\"./EmoDocResults\";import EmoTargResults from\"./EmoTargResults\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ResultsHeader=function ResultsHeader(){var _useContext=useContext(Context),results=_useContext.results,sUsername=_useContext.sUsername,subreddit=_useContext.subreddit,searchTerms=_useContext.searchTerms;// Renders search results header, toggles render of 'search term' results\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Divider,{horizontal:true,children:/*#__PURE__*/_jsxs(Header,{as:\"h3\",children:[/*#__PURE__*/_jsx(Icon,{name:\"search\"}),\"Search Info\"]})}),/*#__PURE__*/_jsx(Table,{unstackable:true,children:/*#__PURE__*/_jsx(Table.Body,{children:/*#__PURE__*/_jsxs(Table.Row,{textAlign:\"left\",style:{fontWeight:\"bold\"},children:[/*#__PURE__*/_jsx(Table.Cell,{className:\"cellLabel\",children:\"Reddit User:\"}),/*#__PURE__*/_jsx(Table.Cell,{children:sUsername?sUsername:\"-\"}),/*#__PURE__*/_jsx(Table.Cell,{className:\"cellLabel\",children:\"Subreddit:\"}),/*#__PURE__*/_jsx(Table.Cell,{children:subreddit?subreddit:\"-\"}),/*#__PURE__*/_jsx(Table.Cell,{className:\"cellLabel\",children:\"Topic:\"}),/*#__PURE__*/_jsx(Table.Cell,{children:searchTerms?searchTerms:\"-\"})]})})}),/*#__PURE__*/_jsx(Divider,{horizontal:true,children:/*#__PURE__*/_jsxs(Header,{as:\"h3\",children:[/*#__PURE__*/_jsx(Icon,{name:\"bar chart\"}),\"Results\"]})}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Overall Sentiment Score: \",results.sentimentDocument.score,\" (\",results.sentimentDocument.label,\")\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"emoDocResults\",children:[/*#__PURE__*/_jsx(EmoDocResults,{emoDoc:results.emotionDocument}),!!results.emotionTarget?results.emotionTarget.map(function(targ,id){return/*#__PURE__*/_jsx(EmoTargResults,{targ:targ},id);}):null]})]});};export default ResultsHeader;","map":{"version":3,"sources":["/home/brinton/Development/School/Phase5/Reddit-Sentiment-Analyzer/client/src/Components/ResultsHeader.js"],"names":["React","useContext","Divider","Header","Icon","Table","Context","EmoDocResults","EmoTargResults","ResultsHeader","results","sUsername","subreddit","searchTerms","fontWeight","sentimentDocument","score","label","emotionDocument","emotionTarget","map","targ","id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,OAAT,CAAkBC,MAAlB,CAA0BC,IAA1B,CAAgCC,KAAhC,KAA6C,mBAA7C,CACA,OAASC,OAAT,KAAwB,oBAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,gBAAuDR,UAAU,CAACK,OAAD,CAAjE,CAAQI,OAAR,aAAQA,OAAR,CAAiBC,SAAjB,aAAiBA,SAAjB,CAA4BC,SAA5B,aAA4BA,SAA5B,CAAuCC,WAAvC,aAAuCA,WAAvC,CAEA;AAEA,mBACE,oCACE,KAAC,OAAD,EAAS,UAAU,KAAnB,uBACE,MAAC,MAAD,EAAQ,EAAE,CAAC,IAAX,wBACE,KAAC,IAAD,EAAM,IAAI,CAAC,QAAX,EADF,iBADF,EADF,cAOE,KAAC,KAAD,EAAO,WAAW,CAAE,IAApB,uBACE,KAAC,KAAD,CAAO,IAAP,wBACE,MAAC,KAAD,CAAO,GAAP,EAAW,SAAS,CAAC,MAArB,CAA4B,KAAK,CAAE,CAAEC,UAAU,CAAE,MAAd,CAAnC,wBACE,KAAC,KAAD,CAAO,IAAP,EAAY,SAAS,CAAC,WAAtB,0BADF,cAEE,KAAC,KAAD,CAAO,IAAP,WAAaH,SAAS,CAAGA,SAAH,CAAe,GAArC,EAFF,cAGE,KAAC,KAAD,CAAO,IAAP,EAAY,SAAS,CAAC,WAAtB,wBAHF,cAIE,KAAC,KAAD,CAAO,IAAP,WAAaC,SAAS,CAAGA,SAAH,CAAe,GAArC,EAJF,cAKE,KAAC,KAAD,CAAO,IAAP,EAAY,SAAS,CAAC,WAAtB,oBALF,cAME,KAAC,KAAD,CAAO,IAAP,WAAaC,WAAW,CAAGA,WAAH,CAAiB,GAAzC,EANF,GADF,EADF,EAPF,cAmBE,KAAC,OAAD,EAAS,UAAU,KAAnB,uBACE,MAAC,MAAD,EAAQ,EAAE,CAAC,IAAX,wBACE,KAAC,IAAD,EAAM,IAAI,CAAC,WAAX,EADF,aADF,EAnBF,cAyBE,kDAC4BH,OAAO,CAACK,iBAAR,CAA0BC,KADtD,MAEGN,OAAO,CAACK,iBAAR,CAA0BE,KAF7B,OAzBF,cA6BE,aAAK,SAAS,CAAC,eAAf,wBACE,KAAC,aAAD,EAAe,MAAM,CAAEP,OAAO,CAACQ,eAA/B,EADF,CAEG,CAAC,CAACR,OAAO,CAACS,aAAV,CACGT,OAAO,CAACS,aAAR,CAAsBC,GAAtB,CAA0B,SAACC,IAAD,CAAOC,EAAP,CAAc,CACtC,mBAAO,KAAC,cAAD,EAAyB,IAAI,CAAED,IAA/B,EAAqBC,EAArB,CAAP,CACD,CAFD,CADH,CAIG,IANN,GA7BF,GADF,CAwCD,CA7CD,CA+CA,cAAeb,CAAAA,aAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { Divider, Header, Icon, Table } from \"semantic-ui-react\";\nimport { Context } from \"../context/Context\";\nimport EmoDocResults from \"./EmoDocResults\";\nimport EmoTargResults from \"./EmoTargResults\";\n\nconst ResultsHeader = () => {\n  const { results, sUsername, subreddit, searchTerms } = useContext(Context);\n\n  // Renders search results header, toggles render of 'search term' results\n\n  return (\n    <div>\n      <Divider horizontal>\n        <Header as='h3'>\n          <Icon name='search' />\n          Search Info\n        </Header>\n      </Divider>\n      <Table unstackable={true}>\n        <Table.Body>\n          <Table.Row textAlign='left' style={{ fontWeight: \"bold\" }}>\n            <Table.Cell className='cellLabel'>Reddit User:</Table.Cell>\n            <Table.Cell>{sUsername ? sUsername : \"-\"}</Table.Cell>\n            <Table.Cell className='cellLabel'>Subreddit:</Table.Cell>\n            <Table.Cell>{subreddit ? subreddit : \"-\"}</Table.Cell>\n            <Table.Cell className='cellLabel'>Topic:</Table.Cell>\n            <Table.Cell>{searchTerms ? searchTerms : \"-\"}</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n      <Divider horizontal>\n        <Header as='h3'>\n          <Icon name='bar chart' />\n          Results\n        </Header>\n      </Divider>\n      <h3>\n        Overall Sentiment Score: {results.sentimentDocument.score} (\n        {results.sentimentDocument.label})\n      </h3>\n      <div className='emoDocResults'>\n        <EmoDocResults emoDoc={results.emotionDocument}></EmoDocResults>\n        {!!results.emotionTarget\n          ? results.emotionTarget.map((targ, id) => {\n              return <EmoTargResults key={id} targ={targ}></EmoTargResults>;\n            })\n          : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsHeader;\n"]},"metadata":{},"sourceType":"module"}